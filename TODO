Test cases
[ ] Database creation
    [*] query on an empty database
        [x] iteration (assert begin == end)
        [x] read (always returns error)
        [-] update, select, operate, write, directOperate - idem
		    -- the only thing that really gets tested here is the fetch method, which makes this a low-priority test
        [x] freeze should work
    [x] insert
        [x] insert more than # of allowed points
        [x] insert, then update, then insert again
        [x] insert, then read, then insert again
        [x] insert, then freeze, then insert again
[ ] filtering
    [x] database must not allow silently changing point type
    [ ] verify filter is called on all ops except read, select
        and update
    [ ] verify changes are not allowed unless filter allows them
    [ ] verify that when filter returns false, not-allowed error
        is raised
[x] freezing
    [x] verify behavior when too many freezes
[ ] transactions
    [ ] any number of concurrent write transactions
    [ ] configurable max. number of steps per transaction
[ ] memory management
    [ ] override alloc/free functions
    [ ] set a flag when initializarion is done
    [ ] break if allocation after that
    [ ] systematically check for memory problems (leaks)
    =>  this should be integrated into all tests as much as
        possible
[ ] threading: use ThreadSanitizer
    [ ] port RTIMDB to Vlinder.Atomics
    [ ] identify test cases
    [ ] port any fixes to GitHub branch (which must not depend 
        on Vlinder.Atomics)

